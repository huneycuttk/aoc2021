protocol SnailfishNumber {
    var depth: Int { get }
    var magnitude: Int { get }
    
    func split() -> SnailfishNumber?
    func explode(topMost: SnailfishNumber, depth: Int) -> SnailfishNumber?
}

struct RegularNumber: SnailfishNumber {
    let depth = 0
    var magnitude: Int { get { value } }
    let value: Int
    
    init(_ value: Int) {
        self.value = value
    }
    
    func split() -> SnailfishNumber? {
        if (value >= 10) {
            let left = value / 2
            let right = (value % 2) == 0 ? left : left+1
        
            return NumberPair(RegularNumber(left), RegularNumber(right))
        }
        
        return nil
    }
    
    func explode(topMost: SnailfishNumber, depth: Int) -> SnailfishNumber? {
        return nil
    }
}

struct NumberPair: SnailfishNumber {
    let left, right: SnailfishNumber
    
    init(_ left: SnailfishNumber, _ right: SnailfishNumber) {
        self.left = left
        self.right = right
    }
    
    var depth: Int {
        get {
            [ left.depth, right.depth ].max()!
        }
    }
    
    var magnitude: Int {
        get {
            3*left.magnitude+2*right.magnitude
        }
    }
        
    func split() -> SnailfishNumber? {
        if let newLeft = left.split() {
            return newLeft + right
        } else if let newRight = right.split() {
            return left + newRight
        } else {
            return nil
        }
    }
    
    func explode(topMost: SnailfishNumber, depth: Int) -> SnailfishNumber? {
        if (depth == 1) {
            var parents: [SnailfishNumber: SnailfishNumber] = [:]
            var numberNodes: [RegularNumber] = []
            var queue: [SnailfishNumber] = [topMost]
            while (!queue.isEmpty) {
                let parent = queue.removeFirst()
                switch(parent) {
                case let node as RegularNumber:
                    numberNodes.append(node)
                case let pair as NumberPair:
                    parents[pair.right] = pair
                    parents[pair.left] = pair
                    queue.append(pair.left)
                    queue.append(pair.right)
                default:
                    break
                }
            }
            
            
        } else if (left.depth >= depth-1) {
            return left.explode(topMost: topMost, depth: depth-1)
        } else if (right.depth >= depth-1) {
            return right.explode(topMost: topMost, depth: depth-1)
        } else {
            return nil
        }
    }
}

func +(left: SnailfishNumber, right: SnailfishNumber) -> SnailfishNumber {
    return NumberPair(left, right)
}
